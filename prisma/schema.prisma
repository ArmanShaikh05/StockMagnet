// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String       @id @default(cuid())
  clerkUserId  String       @unique
  firstName    String
  lastName     String
  email        String
  priceId      String?
  subscription Subscription @default(FreePlan)
  onBoarded    Boolean      @default(false)
  branches     Branches[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  payment      Payments?
  Category     Category[]
  Brand        Brand[]
  Units        Units[]
  Suppliers    Suppliers?
}

model Branches {
  id             String           @id @default(cuid())
  branchName     String
  branchImage    String
  imageId        String
  branchAddress  String
  isPrimary      Boolean          @default(false)
  User           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  GstNumber      String?
  products       Products[]
  Invoices       Invoices[]
  grossRevenue   Int?             @default(0)
  netRevenue     Int?             @default(0)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  PurchaseOrders PurchaseOrders[]
}

enum Subscription {
  FreePlan
  BasicPlan
  ProPlan
}

model Invoices {
  id              String           @id @default(cuid())
  invoiceNumber   String
  invoiceDate     DateTime
  customerName    String
  customerMobile  String
  customerAddress String
  subTotal        Decimal
  totalTaxAmount  Decimal
  totalDiscount   Decimal
  grandTotal      Decimal
  isGstBill       Boolean          @default(false)
  gstNumber       String?
  status          InvoiceStatus
  paymentMode     PaymentMode
  totalQuantity   Int
  amountPaid      Decimal
  creditedAmount  Decimal
  profitGain      Decimal
  branch          Branches         @relation(fields: [branchId], references: [id], onDelete: Cascade)
  branchId        String
  products        InvoiceProduct[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

enum InvoiceStatus {
  FullPaid
  Credited
  NotPaid
}

enum PaymentMode {
  UPI
  Cash
  Bank
}

model InvoiceProduct {
  id                 String   @id @default(cuid())
  productId          String
  productName        String
  productSno         String
  quantity           Int
  productMrp         Decimal
  rate               Decimal
  Brand              String
  BrandColorCode     String
  Category           String
  CategoryColorCode  String
  productImage       String
  sellingPrice       Decimal
  units              String
  taxRate            String
  profitGain         Decimal
  taxAmount          Decimal? @default(0.0)
  subTotal           Decimal
  discountAmount     Decimal? @default(0.0)
  taxIncludedWithMrp Boolean  @default(false)
  Invoices           Invoices @relation(fields: [invoicesId], references: [id], onDelete: Cascade)
  invoicesId         String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Category {
  id            String     @id @default(cuid())
  categoryName  String
  colorCode     String
  totalProducts Int        @default(0)
  totalProfit   Decimal?   @default(0)
  user          User       @relation(fields: [userClerkId], references: [clerkUserId], onDelete: Cascade)
  userClerkId   String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  Products      Products[]

  @@unique([categoryName, userClerkId])
}

model Brand {
  id           String     @id @default(cuid())
  brandName    String
  colorCode    String
  totalProduct Int        @default(0)
  // This total revnue is gross revenue means it contains tax amount along with it
  totalRevenue Decimal?   @default(0)
  totalProfit  Decimal?   @default(0)
  products     Products[]
  user         User       @relation(fields: [userClerkId], references: [clerkUserId], onDelete: Cascade)
  userClerkId  String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([brandName, userClerkId])
}

model Units {
  id          String     @id @default(cuid())
  unitName    String
  unitCode    String
  canDelete   Boolean    @default(true)
  products    Products[]
  user        User?      @relation(fields: [userClerkId], references: [clerkUserId], onDelete: Cascade)
  userClerkId String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@unique([unitName, userClerkId])
}

model Products {
  id                   String                 @id @default(cuid())
  productName          String
  productImage         String
  imageId              String
  productSno           String
  MRP                  Decimal
  purchasePrice        Decimal
  HSNCode              String?
  taxRate              String?
  warrantyMonths       Int?
  stockInHand          Int
  minStockQty          Int
  status               ProductStatus          @default(AVAILABLE)
  tags                 String[]
  taxIncludedWithMrp   Boolean                @default(false)
  reorderQty           Int?
  branch               Branches               @relation(fields: [branchId], references: [id], onDelete: Cascade)
  branchId             String
  category             Category               @relation(fields: [categoryId], references: [id])
  categoryId           String
  Brand                Brand                  @relation(fields: [brandId], references: [id])
  brandId              String
  unit                 Units                  @relation(fields: [unitId], references: [id])
  unitId               String
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  purchaseOrders PurchaseOrderProduct[]
}

enum ProductStatus {
  AVAILABLE
  LOWSTOCK
  UNAVAILABLE
}

model Payments {
  id             String   @id @default(cuid())
  amount         Decimal
  status         String
  stripPaymentId String   @unique
  priceId        String
  userEmail      String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String   @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Suppliers {
  id             String           @id @default(cuid())
  name           String
  email          String?          @unique
  phone          String
  address        String
  state          String
  gstNumber      String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  PurchaseOrders PurchaseOrders[]
  user           User             @relation(fields: [userClerkId], references: [clerkUserId], onDelete: Cascade)
  userClerkId    String           @unique
}

model PurchaseOrders {
  id                    String                 @id @default(cuid())
  supplier              Suppliers              @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  supplierId            String
  branch                Branches               @relation(fields: [branchId], references: [id], onDelete: Cascade)
  branchId              String
  purchaseDate          DateTime
  invoiceImageUrl       String?
  invoiceImageId        String?
  totalItems            Int
  creditedAmount        Int?
  paymentStatus         InvoiceStatus
  supplierInvoiceNumber String?
  paymentMode           PaymentMode
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  products  PurchaseOrderProduct[]
}

model PurchaseOrderProduct {
  id              String         @id @default(cuid())
  purchaseOrder   PurchaseOrders @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  purchaseOrderId String

  product   Products @relation(fields: [productId], references: [id])
  productId String

  quantity Int
}
